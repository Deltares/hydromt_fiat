"""The custom vulnerability component."""

import logging
from pathlib import Path

from hydromt.model import Model
from hydromt.model.components import TablesComponent
from hydromt.model.steps import hydromt_step

from hydromt_fiat import workflows

__all__ = ["VulnerabilityComponent"]

logger = logging.getLogger(f"hydromt.{__name__}")


class VulnerabilityComponent(TablesComponent):
    """Custom vulnerability component.

    Inherits from the HydroMT-core TablesComponent model-component.

    Parameters
    ----------
    model: Model
        HydroMT model instance
    filename: str
        The default place that should be used for reading and writing unless the
        user overrides it. If a relative path is given it will be used as being
        relative to the model root. By default `vulnerability/{name}.csv`
    """

    def __init__(
        self,
        model: "Model",
        filename: str = "vulnerability/{name}.csv",
    ):
        super().__init__(
            model,
            filename=filename,
        )

    @hydromt_step
    def setup_vulnerability(
        self,
        vulnerability_fname: Path | str,
        vulnerability_linking_fname: Path | str | None = None,
        *,
        unit: str = "m",
        index_name: str = "water depth",
        **select,
    ) -> None:
        """Set up the vulnerability from a data source.

        Warning
        -------
        The datasets (vulnerability_fname and vulnerability_linking_fname) \
need to have a 'type' column.

        Parameters
        ----------
        vulnerability_fname : Path | str
            Path to vulnerability dataset file or an entry in the data catalog that
            points to the vulnerability dataset file.
        vulnerability_linking_fname : Path | str | None, optional
            Path or data catalog entry of the vulnerability linking table.
            If not provided, it is assumed that the 'type' in the vulnerability dataset
            is correct, by default None
        unit : str, optional
            The unit which the vulnerability index is in, by default "m"
        index_name : str, optional
            The output name of the index column, by default "water depth"
        select : dict, optional
            Keyword arguments to select data from the 'vulnerability_fname' data source.

        Returns
        -------
            None
        """
        logger.info("Setting up the vulnerability curves")
        # Get the data from the catalog
        vulnerability_data = self.model.data_catalog.get_dataframe(vulnerability_fname)
        vulnerability_linking = None
        if vulnerability_linking_fname is not None:
            vulnerability_linking = self.model.data_catalog.get_dataframe(
                vulnerability_linking_fname
            )

        # Invoke the workflow method to create the curves from raw data
        vuln_curves, vuln_id = workflows.vulnerability_curves(
            vulnerability_data,
            vulnerability_linking=vulnerability_linking,
            unit=unit,
            index_name=index_name,
            **select,
        )

        self.set(vuln_curves, "vulnerability_curves")
        self.set(vuln_id, "vulnerability_identifiers")

        self.model.config.set(
            "vulnerability.file",
            self._filename.format(name="vulnerability_curves"),
        )
