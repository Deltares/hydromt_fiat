"""The custom vulnerability component."""

import logging
from dataclasses import dataclass
from pathlib import Path

import pandas as pd
from hydromt.model import Model
from hydromt.model.components import ModelComponent
from hydromt.model.steps import hydromt_step

from hydromt_fiat import workflows

__all__ = ["VulnerabilityComponent"]

logger = logging.getLogger(f"hydromt.{__name__}")


@dataclass
class VulnerabilityData:
    curves: pd.DataFrame
    identifiers: pd.DataFrame

    def __iter__(self):
        self._cur_index = 0
        return self

    def __next__(self) -> pd.DataFrame:
        if self._cur_index < len(self.fields):
            x = self[self.fields[self._cur_index]]
            self._cur_index += 1
            return x
        else:
            raise StopIteration

    def __getitem__(self, key: str) -> pd.DataFrame:
        if key not in self.fields:
            raise KeyError(f"Can't get '{key}'")
        return super().__getattribute__(key)

    def __setitem__(self, key: str, value: pd.DataFrame):
        if key not in self.fields:
            raise KeyError(f"Can't set '{key}' in {self.__class__.__name__} class")
        super().__setattr__(key, value)

    @property
    def fields(self):
        """Return the known fields."""
        return list(self.__dataclass_fields__.keys())


class VulnerabilityComponent(ModelComponent):
    """Custom vulnerability component.

    Inherits from the HydroMT-core TablesComponent model-component.

    Parameters
    ----------
    model : Model
        HydroMT model instance
    filename : str
        The default place that should be used for reading and writing unless the
        user overrides it. If a relative path is given it will be used as being
        relative to the model root. By default `vulnerability/curves.csv`
    """

    def __init__(
        self,
        model: Model,
        filename: str = "vulnerability/curves.csv",
    ):
        self._data: VulnerabilityData | None = None
        self._filename: str = filename
        super().__init__(
            model,
        )

    ## Private
    def _initialize(self, skip_read=False) -> None:
        """Initialize the model config."""
        if self._data is None:
            self._data = VulnerabilityData(pd.DataFrame(), pd.DataFrame())
            if not skip_read and self.root.is_reading_mode():
                self.read()

    ## Properties
    @property
    def data(self) -> VulnerabilityData:
        """Model config values."""
        if self._data is None:
            self._initialize()
        return self._data

    ## I/O methods
    @hydromt_step
    def read(self, filename: Path | str | None = None, **kwargs):
        """Read the vulnerability data.

        Parameters
        ----------
        filename : Path | str | None, optional
            Path to the file. Can be absolute or relative to the model root,
            by default None
        **kwargs : dict
            Keyword arguments for the `read_csv` function of pandas.
        """
        self.root._assert_read_mode()
        self._initialize(skip_read=True)

        # Sort out the file path
        # Hierarchy: 1) signature, 2) config file, 3) default
        filename = (
            filename
            or self.model.config.get("vulnerability.file", abs_path=True)
            or self._filename
        )
        # Make absolute
        read_path = Path(self.root.path, filename)

        # Check for the path
        if not read_path.is_file():
            return

        # Read the data with pandas
        logger.info("Reading the vulnerability table(s)..")
        data = pd.read_csv(read_path, **kwargs)
        # Set the data
        self.set(data, name="curves")

        # Try to read the identifiers
        read_path_id = read_path.with_stem(f"{read_path.stem}_id")
        if read_path_id.is_file():
            data_id = pd.read_csv(read_path_id)
        else:
            data_id = workflows.process_vulnerability_linking(
                data.columns.values,
            )
        self.set(data_id, name="identifiers")

    @hydromt_step
    def write(
        self,
        filename: str | None = None,
        **kwargs,
    ):
        """Write the vulnerability data.

        Parameters
        ----------
        filename : Path | str | None, optional
            Path to the file. Can be absolute or relative to the model root,
            by default None
        **kwargs : dict
            Keyword arguments for the `to_csv` function of pandas.
        """
        self.root._assert_write_mode()

        # If not curves, skip writing
        if self.data.curves.empty:
            logger.info("No vulnerability curves encountered, skipping..")
            return

        # Sort out the filename
        # Hierarchy: 1) signature, 2) config file, 3) default
        filename = (
            filename or self.model.config.get("vulnerability.file") or self._filename
        )
        write_path = Path(self.root.path, filename)

        # Make sure the directory exists
        if not write_path.parent.is_dir():
            write_path.parent.mkdir(parents=True, exist_ok=True)

        # Adjust the outgoing kwargs
        if "index" not in kwargs:
            kwargs["index"] = False

        # Write the two files
        logger.info("Writing the vulnerability tables..")
        self.data.curves.to_csv(write_path, **kwargs)
        self.data.identifiers.to_csv(
            write_path.with_stem(f"{write_path.stem}_id"), **kwargs
        )

        # Set the config file
        self.model.config.set("vulnerability.file", write_path)

    ## Action methods
    def set(
        self,
        data: pd.DataFrame,
        name: str,
    ):
        """Set data in the vulnerability component.

        Parameters
        ----------
        data : pd.DataFrame
            The tabular dataset.
        name : str
            Name of the dataset, either 'curves' or 'identifiers'.
        """
        self._initialize()
        if not self.data[name].empty:
            logger.warning(f"Replacing vulnerabilty data: {name}")
        self._data[name] = data

    ## Mutating methods
    @hydromt_step
    def setup(
        self,
        vulnerability_fname: Path | str,
        vulnerability_linking_fname: Path | str | None = None,
        *,
        unit: str = "m",
        index_name: str = "water depth",
        **select,
    ) -> None:
        """Set up the vulnerability from a data source.

        Warning
        -------
        The datasets (vulnerability_fname and vulnerability_linking_fname) \
need to have a 'type' column.

        Parameters
        ----------
        vulnerability_fname : Path | str
            Path to vulnerability dataset file or an entry in the data catalog that
            points to the vulnerability dataset file.
        vulnerability_linking_fname : Path | str | None, optional
            Path or data catalog entry of the vulnerability linking table.
            If not provided, it is assumed that the 'type' in the vulnerability dataset
            is correct, by default None
        unit : str, optional
            The unit which the vulnerability index is in, by default "m"
        index_name : str, optional
            The output name of the index column, by default "water depth"
        **select : dict, optional
            Keyword arguments to select data from the 'vulnerability_fname' data source.

        Returns
        -------
            None
        """
        logger.info("Setting up the vulnerability curves")
        # Get the data from the catalog
        vulnerability_data = self.model.data_catalog.get_dataframe(vulnerability_fname)
        vulnerability_linking = None
        if vulnerability_linking_fname is not None:
            vulnerability_linking = self.model.data_catalog.get_dataframe(
                vulnerability_linking_fname
            )

        # Invoke the workflow method to create the curves from raw data
        vuln_curves, vuln_id = workflows.vulnerability_curves(
            vulnerability_data,
            vulnerability_linking=vulnerability_linking,
            unit=unit,
            index_name=index_name,
            **select,
        )

        self.set(vuln_curves, "curves")
        self.set(vuln_id, "identifiers")
