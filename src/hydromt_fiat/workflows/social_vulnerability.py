"""Social vulnerability index workflows."""

import geopandas as gpd
import pandas as pd

__all__ = ["process_svi_data", "link_exposure_svi"]


def process_svi_data(data: gpd.GeoDataFrame) -> gpd.GeoDataFrame:
    """Process svi data.

    Parameters
    ----------
    data : gpd.GeoDataFrame
        _description_

    Returns
    -------
    gpd.GeoDataFrame
        _description_
    """
    pass


def link_exposure_svi(
    exposure_geoms: gpd.GeoDataFrame, svi_data: gpd.GeoDataFrame
) -> gpd.GeoDataFrame:
    """Link social vulnerabiltiy index with exposure geometries.

    Parameters
    ----------
    exposure_geoms : gpd.GeoDataFrame
        _description_
    svi_data : gpd.GeoDataFrame
        _description_

    Returns
    -------
    gpd.GeoDataFrame
        _description_
    """
    # Make sure CRS matches
    if svi_data.crs != exposure_geoms.crs:
        svi_data = svi_data.to_crs(crs=exposure_geoms.crs)

    svi_data = svi_data[["SVI_key_domain", "composite_svi_z", "geometry"]]

    # Filter out the roads because they do not have an SVI score
    filter_roads = exposure_geoms["primary_object_type"] != "roads"

    # Spatially join svi_data with exposure_geomns
    exposure_svi = gpd.sjoin(exposure_geoms.loc[filter_roads], svi_data, how="left")
    exposure_svi = exposure_svi[["object_id", "SVI_key_domain", "composite_svi_z"]]
    exposure_svi = pd.DataFrame(exposure_svi)
    exposure_svi = exposure_svi.rename(columns={"composite_svi_z": "SVI"})

    return exposure_geoms.merge(exposure_svi, on="object_id", how="left")
