from hydromt_fiat.fiat import FiatModel
from hydromt.log import setuplog
from pathlib import Path
import pytest
import shutil
import geopandas as gpd
import rasterio
import numpy as np

EXAMPLEDIR = Path(
    "P:/11207949-dhs-phaseii-floodadapt/Model-builder/Delft-FIAT/local_test_database"
)
EXAMPLEDIR = Path().absolute() / "examples" / "data" / "setup_exposure_buildings_with_dem_data"
DATADIR = Path().absolute() / "hydromt_fiat" / "data"
DATADIRDEM = Path(
    "P:/11207949-dhs-phaseii-floodadapt/FloodAdapt/Test_data/Database_env_fix/static/dem"
)

_region = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [-79.92169686568795, 32.768208904171374],
                        [-79.92169686568795, 32.77745096033627],
                        [-79.94881762529997, 32.77745096033627],
                        [-79.94881762529997, 32.768208904171374],
                        [-79.92169686568795, 32.768208904171374],
                    ]
                ],
                "type": "Polygon",
            },
        }
    ],
}
_cases = {
    "vulnerability_and_exposure_NSI_dem_data": {
        "data_catalogue": DATADIR / "hydromt_fiat_catalog_USA.yml",
        "dir": "test_vulnerability_and_exposure_NSI_with_dem_data",
        "configuration": {
            "setup_global_settings": {"crs": "epsg:4326"},
            "setup_output": {
                "output_dir": "output",
                "output_csv_name": "output.csv",
                "output_vector_name": "spatial.gpkg",
            },
            "setup_vulnerability": {
                "vulnerability_fn": "default_vulnerability_curves",
                "vulnerability_identifiers_and_linking_fn": "default_hazus_iwr_linking",
                "functions_mean": "default",
                "functions_max": ["AGR1"],
                "unit": "feet",
                "step_size": 0.1,
            },
            "setup_exposure_buildings": {
                "asset_locations": "NSI",
                "occupancy_type": "NSI",
                "max_potential_damage": "NSI",
                "damage_types": ["structure", "content"],
                "ground_floor_height": "NSI",
                "ground_elevation_file": DATADIRDEM 
                / "charleston_14m.tif",
                "unit": "ft",
            },
        },
        "region": _region,
    },

}


@pytest.mark.parametrize("case", list(_cases.keys()))
def test_vulnerability_exposure_NSI_dem_data(case):
    # Read model in examples folder.
    root = EXAMPLEDIR.joinpath(_cases[case]["dir"])
    if root.exists():
        shutil.rmtree(root)

    logger = setuplog("hydromt_fiat", log_level=10)
    data_catalog_yml = str(_cases[case]["data_catalogue"])

    fm = FiatModel(
        root=root, 
        mode="w", 
        data_libs=[data_catalog_yml], 
        logger=logger
    )

    region = gpd.GeoDataFrame.from_features(_cases[case]["region"], crs=4326)
    fm.build(region={"geom": region}, opt=_cases[case]["configuration"])
    fm.write()

    # Check if the updated values are not null
    not_null_values = fm.exposure.exposure_db["Ground Elevation"].notnull()
    assert not_null_values.all(), "Warning: There are null values in 'Ground Elevation' column."


    # Check if the calculated values are within the maximun and minimun value of the original daster file. This function could be used to calculate 
    # Ground Elevation itself in case the ground_elevation_from_dem() function in gis.py is not accurate enough
    raster_file_path = _cases[case]["configuration"]["setup_exposure_buildings"]["ground_elevation_file"]
    with rasterio.open(raster_file_path) as src:
        nodata_value = src.nodatavals[0]  
        raster_data = src.read(1)
        valid_values = raster_data[raster_data != nodata_value]
        #mean_value_excluding_nodata = np.nanmean(valid_values)
        max_value_excluding_nodata = np.nanmax(valid_values)
        min_value_excluding_nodata = np.nanmin(valid_values)
        valid_values = (fm.exposure.exposure_db["Ground Elevation"] >= min_value_excluding_nodata) & (fm.exposure.exposure_db["Ground Elevation"] <= max_value_excluding_nodata)
    assert valid_values.all(), "The Ground Elevation is beyond the maximun and minimun values of the provided DEM"

