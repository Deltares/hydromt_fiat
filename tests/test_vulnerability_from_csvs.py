from hydromt_fiat.fiat import FiatModel
from hydromt.log import setuplog
from pathlib import Path
import pytest
import shutil
import pandas as pd

EXAMPLEDIR = Path(
    "P:/11207949-dhs-phaseii-floodadapt/Model-builder/Delft-FIAT/local_test_database"
)

_cases = {
    "csvs": {
        "dir": "test_csvs",
        "configuration": {
            "setup_vulnerability_from_csv": {
                "csv_fn": str(
                    Path(__file__).parent / "data" / "separate_damage_functions"
                ),
                "unit": "feet",
            },
        },
    }
}


@pytest.mark.parametrize("case", list(_cases.keys()))
def test_csvs(case):
    # Read model in examples folder.
    root = EXAMPLEDIR.joinpath(_cases[case]["dir"])
    if root.exists():
        shutil.rmtree(root)

    logger = setuplog("hydromt_fiat", log_level=10)

    fm = FiatModel(root=root, mode="w", logger=logger)
    fm.build(opt=_cases[case]["configuration"])
    fm.write()

    # Check if the vulnerability data exists
    vulnerability_curves_path = root.joinpath(
        "vulnerability", "vulnerability_curves.csv"
    )
    assert vulnerability_curves_path.exists()

    # Check if the vulnerability data is correct by comparing it to data that is known
    # to be correct
    vulnerability_curves = pd.read_csv(vulnerability_curves_path)
    correct_vulnerability_curves = pd.read_csv(
        Path(__file__).parent / "data" / "correct" / "test_csvs.csv"
    )

    assert vulnerability_curves.equals(correct_vulnerability_curves)
