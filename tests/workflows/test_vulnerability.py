import pytest

from hydromt_fiat.workflows import vulnerability_curves


def test_vulnerability_curves(vulnerability_data, vulnerability_linking):
    # Execute the workflow function
    vuln_curves, vuln_id = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        continent="europe",
    )

    assert len(vuln_curves.columns) == 9
    assert len(vuln_id.columns) == 5
    assert "residential_structure" in vuln_curves.columns
    assert "residential_structure" in vuln_id.curve_id.values
    assert "industrial_structure" in vuln_curves.columns
    assert "industrial_structure" in vuln_id.curve_id.values


def test_vulnerability_curves_typing(vulnerability_data, vulnerability_linking):
    # Check for selecting specific types
    vuln_curves, vuln_id = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        continent="europe",
        type=["residential", "commercial"],
    )

    assert len(vuln_curves.columns) == 5
    assert "residential_structure" in vuln_curves.columns
    assert "residential_structure" in vuln_id.curve_id.values
    assert "industrial_structure" not in vuln_curves.columns
    assert "industrial_structure" not in vuln_id.curve_id.values


def test_vulnerability_curves_no_subtype(vulnerability_data, vulnerability_linking):
    # Check for no subtypes in linking table
    vulnerability_linking_no = vulnerability_linking.drop("subtype", axis=1)
    vuln_curves, _ = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking_no,
        continent="europe",
        type=["residential", "commercial"],
    )

    assert len(vuln_curves.columns) == 3
    assert "residential" in vuln_curves.columns
    assert "residential_structure" not in vuln_curves.columns


def test_vulnerability_curves_units(vulnerability_data, vulnerability_linking):
    # First with meters
    vuln_curves, _ = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        continent="europe",
        type=["residential", "commercial"],
    )
    mean_val = int(vuln_curves["water depth"].mean() * 100)
    assert mean_val == 500

    # Assert that different units work (in this case feet)
    vuln_curves, _ = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        unit="ft",
        continent="europe",
        type=["residential", "commercial"],
    )
    mean_val_ft = int(vuln_curves["water depth"].mean() * 100)
    assert mean_val > 3 * mean_val_ft


def test_vulnerability_curves_no_linking(vulnerability_data):
    # No linking at all
    vuln_curves, vuln_id = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        continent="europe",
        type=["residential", "commercial"],
    )
    assert len(vuln_curves.columns) == 3
    assert (vuln_id["link"].values == vuln_id["curve_id"].values).all()


def test_vulnerability_curves_error(vulnerability_data, vulnerability_linking):
    # No 'type' column in datasets
    vuln_no_type = vulnerability_data.drop("type", axis=1)
    with pytest.raises(
        KeyError,
        match="The 'type' column in not present in the vulnerability data",
    ):
        _ = vulnerability_curves(
            vulnerability_data=vuln_no_type,
            continent="europe",
            type=["residential", "commercial"],
        )

    vulnerability_linking_no_type = vulnerability_linking.drop("type", axis=1)
    with pytest.raises(
        KeyError, match="The 'type' column in not present in the linking table"
    ):
        _ = vulnerability_curves(
            vulnerability_data=vulnerability_data,
            vulnerability_linking=vulnerability_linking_no_type,
            continent="europe",
            type=["residential", "commercial"],
        )
