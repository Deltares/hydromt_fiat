import pandas as pd
import pytest

from hydromt_fiat.workflows import vulnerability_curves


def test_vulnerability_curves(
    vulnerability_data: pd.DataFrame,
    vulnerability_linking: pd.DataFrame,
):
    # Execute the workflow function
    vuln_curves, vuln_id = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        continent="europe",
    )

    assert len(vuln_curves.columns) == 9
    assert len(vuln_id.columns) == 5
    assert "residential_structure" in vuln_curves.columns
    assert "residential_content" in vuln_curves.columns
    assert "residential_structure" in vuln_id.curve_id.values
    assert "industrial_structure" in vuln_curves.columns
    assert "industrial_structure" in vuln_id.curve_id.values


def test_vulnerability_curves_typing(
    vulnerability_data: pd.DataFrame,
    vulnerability_linking: pd.DataFrame,
):
    # Check for selecting specific types
    vuln_curves, vuln_id = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        continent="europe",
        curve=["residential", "commercial"],
    )

    assert len(vuln_curves.columns) == 5
    assert "residential_structure" in vuln_curves.columns
    assert "residential_structure" in vuln_id.curve_id.values
    assert "industrial_structure" not in vuln_curves.columns
    assert "industrial_structure" not in vuln_id.curve_id.values


def test_vulnerability_curves_both_subtype(
    vulnerability_data: pd.DataFrame,
    vulnerability_linking: pd.DataFrame,
):
    # Set all subtypes to stucture
    # This should come back in the amount of curves
    vulnerability_data["subtype"] = "structure"
    # Function
    vuln_curves, _ = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        continent="europe",
    )

    assert len(vuln_curves.columns) == 5  # missing content
    assert "residential_structure" in vuln_curves.columns
    assert "residential_content" not in vuln_curves.columns


def test_vulnerability_curves_no_subtype(
    vulnerability_data: pd.DataFrame,
    vulnerability_linking_alt: pd.DataFrame,
):
    # Check for no subtypes in linking table
    vuln_curves, _ = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking_alt,
        continent="europe",
        curve=["residential", "commercial"],
    )

    # Assert that the output is different and more simple
    assert len(vuln_curves.columns) == 3
    assert "residential" in vuln_curves.columns
    assert "residential_structure" not in vuln_curves.columns


def test_vulnerability_curves_units(
    caplog: pytest.LogCaptureFixture,
    vulnerability_data: pd.DataFrame,
    vulnerability_linking: pd.DataFrame,
):
    # First with meters
    vuln_curves, _ = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        continent="europe",
        curve=["residential", "commercial"],
    )
    mean_val = int(vuln_curves["water depth"].mean() * 100)
    assert mean_val == 500

    # Assert that different units work (in this case feet)
    vuln_curves, _ = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        vulnerability_linking=vulnerability_linking,
        unit="ft",
        continent="europe",
        curve=["residential", "commercial"],
    )
    mean_val_ft = int(vuln_curves["water depth"].mean() * 100)
    assert mean_val > 3 * mean_val_ft
    assert (
        "Given unit (ft) does not match the standard unit (m) for length" in caplog.text
    )


def test_vulnerability_curves_no_linking(vulnerability_data: pd.DataFrame):
    # No linking at all
    vuln_curves, vuln_id = vulnerability_curves(
        vulnerability_data=vulnerability_data,
        continent="europe",
        curve=["residential", "commercial"],
    )
    assert len(vuln_curves.columns) == 3
    assert (vuln_id["exposure_link"].values == vuln_id["curve_id"].values).all()


def test_vulnerability_curves_error(
    vulnerability_data: pd.DataFrame,
    vulnerability_linking: pd.DataFrame,
):
    # No 'type' column in datasets
    vuln_no_type = vulnerability_data.drop("curve", axis=1)
    with pytest.raises(
        KeyError,
        match="The 'curve' column in not present in the vulnerability data",
    ):
        _ = vulnerability_curves(
            vulnerability_data=vuln_no_type,
            continent="europe",
            curve=["residential", "commercial"],
        )

    vulnerability_linking_no_type = vulnerability_linking.drop("curve", axis=1)
    with pytest.raises(
        KeyError, match="The 'curve' column in not present in the linking table"
    ):
        _ = vulnerability_curves(
            vulnerability_data=vulnerability_data,
            vulnerability_linking=vulnerability_linking_no_type,
            continent="europe",
            curve=["residential", "commercial"],
        )
