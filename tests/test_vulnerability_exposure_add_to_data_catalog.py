from hydromt_fiat.fiat import FiatModel
from hydromt.log import setuplog
from pathlib import Path
import pytest
import shutil
import geopandas as gpd
import pandas as pd


EXAMPLEDIR = Path(
    "P:/11207949-dhs-phaseii-floodadapt/Model-builder/Delft-FIAT/local_test_database"
)
DATADIR = Path().absolute() / "hydromt_fiat" / "data"
EXAMPLEDATADIR = Path().absolute() / "examples" / "data"

_region = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [-80.212654974007208, 25.929489783926435],
                        [-80.212654974007208, 25.954789092357636],
                        [-80.238775386044097, 25.954789092357636],
                        [-80.238775386044097, 25.929489783926435],
                        [-80.212654974007208, 25.929489783926435],
                    ]
                ],
                "type": "Polygon",
            },
        }
    ],
}
_cases = {
    "vulnerability_and_exposure_OSM_and_local_data": {
        "data_catalogue": DATADIR / "hydromt_fiat_catalog_USA.yml",
        "dir": "vulnerability_and_exposure_OSM_and_local_data",
        "configuration": {
            "setup_global_settings": {"crs": "epsg:4326"},
            "setup_output": {
                "output_dir": "output",
                "output_csv_name": "output.csv",
                "output_vector_name": "spatial.gpkg",
            },
            "setup_vulnerability": {
                "vulnerability_fn": "default_vulnerability_curves",
                "vulnerability_identifiers_and_linking_fn": "tests/data/vulnerability_test_file_input_miami_landuse.csv",
                "unit": "feet",
            },
            "setup_exposure_buildings": {
                "asset_locations": "OSM",
                "occupancy_type": "landuse_miami_dade",
                "occupancy_attr": "DESCR",
                "max_potential_damage": "hazus_max_potential_damages",
                "ground_floor_height": 1,
                "unit": "feet",
                "damage_types": ["structure", "content"],
            },
        },
        "region": _region,
    },
    "vulnerability_and_exposure_only_local_data": {
        "data_catalogue": DATADIR / "hydromt_fiat_catalog_USA.yml",
        "dir": "vulnerability_and_exposure_only_local_data",
        "configuration": {
            "setup_global_settings": {"crs": "epsg:4326"},
            "setup_output": {
                "output_dir": "output",
                "output_csv_name": "output.csv",
                "output_vector_name": "spatial.gpkg",
            },
            "setup_vulnerability": {
                "vulnerability_fn": "default_vulnerability_curves",
                "vulnerability_identifiers_and_linking_fn": "tests/data/vulnerability_test_file_input_miami_landuse.csv",
                "unit": "feet",
            },
            "setup_exposure_buildings": {
                "asset_locations": "osm_building_footprints",
                "occupancy_type": "landuse_miami_dade",
                "occupancy_attr": "DESCR",
                "max_potential_damage": "hazus_max_potential_damages",
                "ground_floor_height": 1,
                "unit": "feet",
                "damage_types": ["structure", "content"],
            },
        },
        "region": _region,
    },
}


@pytest.mark.parametrize("case", list(_cases.keys()))
def test_vulnerability_and_exposure_add_to_data_catalog(case):
    # Read model in examples folder.
    root = EXAMPLEDIR.joinpath(_cases[case]["dir"])
    if root.exists():
        shutil.rmtree(root)
    data_catalog_yml = str(_cases[case]["data_catalogue"])

    logger = setuplog("hydromt_fiat", log_level=10)

    fm = FiatModel(root=root, mode="w", data_libs=[data_catalog_yml], logger=logger)

    # Add land use data from the user to the data catalog.
    to_add = {
        "landuse_miami_dade": {
            "path": str(EXAMPLEDIR / "miami_data" / "landuse_small.gpkg"),
            "data_type": "GeoDataFrame",
            "driver": "vector",
            "crs": 4326,
            "category": "exposure",
        }
    }
    fm.data_catalog.from_dict(to_add)

    # Add building footprint data from the user to the data catalog.
    to_add = {
        "osm_building_footprints": {
            "path": str(
                EXAMPLEDIR
                / "data"
                / "local_exposure_data_miami"
                / "osm_building_footprints.geojson"
            ),
            "data_type": "GeoDataFrame",
            "driver": "vector",
            "crs": 4326,
            "category": "exposure",
        }
    }
    fm.data_catalog.from_dict(to_add)

    region = gpd.GeoDataFrame.from_features(_cases[case]["region"], crs=4326)
    fm.build(region={"geom": region}, opt=_cases[case]["configuration"])
    fm.write()

    # Check if the exposure data exists
    assert root.joinpath("exposure", "buildings.gpkg").exists()
    assert root.joinpath("exposure", "exposure.csv").exists()
    assert root.joinpath("geoms", "region.geojson").exists()

    # Check if the exposure data contains the columns that should be added
    exposure = pd.read_csv(root.joinpath("exposure", "exposure.csv"))
    required_columns = [
        "object_id",
        "primary_object_type",
        "ground_flht",
        "extract_method",
        "fn_damage_structure",
        "fn_damage_content",
    ]
    assert all([col in exposure.columns for col in required_columns])
    assert "geometry" not in exposure.columns

    # Check if the vulnerability data exists
    assert root.joinpath("vulnerability", "vulnerability_curves.csv").exists()
