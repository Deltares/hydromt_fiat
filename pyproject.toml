## Build system related stuff
[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
include = ["hydromt_fiat*"]

[tool.setuptools.dynamic]
version = {attr = "hydromt_fiat.version.__version__"}

## Project related stuff
[project]
name = "hydromt_fiat"
dynamic = ['version']

authors = [
    {name = "T.C. de Jong", email = "tjalling.dejong@deltares.nl"},
    {name = "L. Blom", email = "luuk.blom@deltares.nl"}
]
maintainers = [
    {name = "T.C. de Jong", email = "tjalling.dejong@deltares.nl"},
    {name = "L. Blom", email = "luuk.blom@deltares.nl"}
]

description = "HydroMT plugin for Delft-FIAT."
readme = "README.md"
license = {text = "GPL-3.0"}

requires-python = ">=3.10"
dependencies = [
"dask",
"geopandas",
"hydromt>=1.0.0a",
"numpy",
"requests",
"tomli",
"tomli-w",
"xarray",
]

keywords = ["HydroMT", "FIAT", "Damage"]
classifiers = [
# How mature is this project? Common values are
#   3 - Alpha
#   4 - Beta
#   5 - Production/Stable
'Development Status :: 4 - Beta',

# Indicate who your project is intended for
'Intended Audience :: End Users/Desktop',
'Intended Audience :: Developers',
'Intended Audience :: Science/Research',

# Topic of the package
'Topic :: Scientific/Engineering :: Hydrology',
'Topic :: Scientific/Engineering :: GIS',

# Pick your license as you wish (should match "license" above)
'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',

# Language
'Natural Language :: English',

# OS
'Operating System :: OS Independent',

# Specify the Python versions you support here. In particular, ensure
# that you indicate whether you support Python 2, Python 3 or both.
'Programming Language :: Python :: 3',
'Programming Language :: Python :: 3.10',
'Programming Language :: Python :: 3.11',
'Programming Language :: Python :: 3.12',
]

[project.optional-dependencies] # Optional
all = [
    "setuptools>=61.0.0",
]
dev = [
    "ruff",
    "pre-commit",
    "pip>=23.1.2",
    "hydromt_fiat[all, docs, examples, test]"
]
docs = [
    "nbsphinx",
	"pydata-sphinx-theme",
    "sphinx",
    "sphinx_design",
    "sphinx_autosummary_accessors",
    "hydromt_fiat[all, examples]",
]
examples = [
    "jupyterlab",
    "cartopy",
    "nbconvert==7.13.1",
    "notebook",
    "hydromt_fiat[all]",
]
test = [
    "pytest>=2.7.3",
    "pytest-cov",
    "pytest-mock",
    "responses",
    "hydromt_fiat[all]",
]

[project.entry-points."hydromt.models"]
fiat = "hydromt_fiat.fiat:FIATModel"

[project.urls]
"Homepage" = "https://github.com/Deltares/hydromt_fiat"
"Bug Reports" = "https://github.com/Deltares/hydromt_fiat/issues"
"Source" =  "https://github.com/Deltares/hydromt_fiat"

[tool.make_env]
channels = ["conda-forge"]
deps_not_in_conda = [
    "sphinx_autosummary_accessors",
    "sphinx_design",
]

## Some stuff for pytest and coverage
[tool.pytest.ini_options]
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
source = ["./src"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = ".cov"

## Linting stuff
[tool.black]
line-length = 88
target-version = ['py312']

[tool.ruff]
line-length = 88

# enable pydocstyle (E), pyflake (F) and isort (I), pytest-style (PT)
select = ["E", "F", "I", "PT", "D"]
ignore-init-module-imports = true
ignore = ["B904", "D105", "D211", "D213", "D301", "E712", "E741"]
exclude = ["docs"]

[tool.ruff.per-file-ignores]
"tests/**" = ["D103", "D100", "D104"]
"tests/conftest.py" = ["E402"]
"src/hydromt_fiat/__init__.py" = ["E402", "F401", "F403"]
"src/hydromt_fiat/workflows/__init__.py" = ["F403"]

[tool.ruff.pydocstyle]
convention = "numpy"
