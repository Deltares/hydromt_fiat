from hydromt_fiat.api.data_types import VulnerabilitySettings, RoadVulnerabilitySettings
from hydromt_fiat.interface.database import IDatabase
from hydromt import DataCatalog
import logging
import pandas as pd

from .data_types import Units
from typing import Union


class VulnerabilityViewModel:
    def __init__(
        self, database: IDatabase, data_catalog: DataCatalog, logger: logging.Logger
    ):
        self.vulnerability_buildings_model = None
        self.vulnerability_roads_model = None

        self.database: IDatabase = database
        self.data_catalog: DataCatalog = data_catalog
        self.logger: logging.Logger = logger
        self.linking_standard_colnames = [
            "FIAT Damage Function Name",
            "Exposure Link",
            "Damage Type",
            "ID",
            "Occupancy",
            "Description",
            "Source",
        ]
        self.linking_table = pd.DataFrame()

    def get_damage_curves_linking_file(self):
        if self.linking_table.empty:
            return self.data_catalog.get_dataframe("default_hazus_iwr_linking")

        return self.linking_table

    def add_vulnerability_curves_to_model(self, vulnerability_fn, link_table):
        self.vulnerability_buildings_model = VulnerabilitySettings(
            vulnerability_fn=vulnerability_fn,
            vulnerability_identifiers_and_linking_fn=link_table,
            unit=Units.ft.value,  # TODO: make flexible
            functions_mean="default",  # TODO: make flexible
        )
        if not self.linking_table.empty:
            self.save_linking_table()
        
    

    def update_linking_table(self, df: pd.DataFrame) -> None:
        self.linking_table = df
        
    def save_linking_table(self) -> None:
        self.vulnerability_buildings_model.vulnerability_identifiers_and_linking_fn = (
            str(self.database.drive / "linking_table.csv")
        )
        self.linking_table.to_csv(
            self.vulnerability_buildings_model.vulnerability_identifiers_and_linking_fn,
            index=False,
        )
        

    def set_road_damage_threshold(self, threshold: Union[int, float]):
        self.vulnerability_roads_model = RoadVulnerabilitySettings(
            threshold_value=threshold,
            min_hazard_value=0,
            max_hazard_value=16,
            step_hazard_value=1.0,
            vertical_unit=Units.ft.value,
        )

    def update_user_linking_table(self, old_value: Union[list, str], new_value: Union[list, str]):
        linking_table_new = self.get_damage_curves_linking_file()
        if isinstance(old_value, list):
            for item, new_item in zip(old_value,new_value):
                linking_table_new["Exposure Link"].replace(item, new_item, inplace = True)
                self.linking_table = linking_table_new
        elif isinstance(old_value,str):
            linking_table_new["Exposure Link"].replace(item, new_value, inplace = True)
            self.linking_table = linking_table_new

